## surround notes: cs"' cs'<q> cst" ds" ysiw] cs]{ yssb ds{ds) ysiw<em>
  * move to f2fs
## ?
  * Advanced recursive types µ insufficient `PTree a = Leaves a | Cons (PTree (a , a))`
  * Linear variables (vbruijn | sourceArg | binding | literal | Extern [ | Field | Label ]) + occurs + src Info (all β-subbed with Term)
  * equality constraints are central to GADTs
  * subtype sum of record = [l : { f : int } | l2 : { f : int }] <: { f : int }
  * open sum type (default case branch)
  * audit oldcachedmodule , seems slightly broken
## Top Priority
  * (Tuple ?) , toCStruct : {A} -> CStruct , fromCStruct : CStruct -> {A}
  * improve pipelining of Main to stop once requested work is done
## µ-roll
  * rollmerge recvars (unwords) : µe.[4.0 | 4.1 {µd.[4.0 | 4.1 {C , d}] , e}]
  * subtyping mu-roll; `splitAt : %i32 -> µb.[C {A , b} | N] → {l : µc.[C {A , c} | N] , r : µb.[N]}` (list.ii: also diff with returning Nil vs xs)
  * nonEmptySubsequences
## µ-elim derivations (identify fixpoints in coresyn / mutual functions)
  * catamorphism
  * codata for left folds
## Fusion
  * Append sub-functions to module (case branches , specialisations , pap-specs)
  * Arg shapes keys to lookup specialisations
  * max destructure; indicate pointless specializing (esp. scanSum)
## Top
  * Typeclasses: `Int <: [ NumInt Int ]` show (esp for repl JIT)
  * Linear types; dependent types required to quantify relative linearity `Lin t ≥ Lin f => t → u`
  * expand lambda-mixfixes with explicit holes & reject unsaturated mixfix words
  * mixfix scope
## Parse
  * allow tabs instead of spaces
  * Pattern guards
  * improve patterns2TT (add tuple of label , add literal) and eqn matches
  * Parse Intrinsics (eg. getFnName , getSourceLine , getSourceFile etc..)
  * figure out end of let-in in mixfix parser ?! `if y then let x = 3 in x else y` (Juxt x else y) or (; Juxt else y)
  * repl parser: multiline case / let
## SSA
  * local/extern names in ssa form
  * normalize order of fields/labels for codegen (sort on size then textual name)
  * case-splits + lambdas as data (for optimal beta-reduction)
## Types
  * Annotations (record , sum , TPi)
  * THFieldCollision
  * Dependent normalisation
  * first class polymorphism
  * replace fnSig with typedTT
  * `typeOf : (t : Type) -> Type` shortcut to access (and alias) an inferred type
## Functor modules and records (infer a module as a TT (Abs | Record) + ImportList , HNames , MixfixNames , LinSubs)
  * file = implicit `filename = record`
  * pattern assignments `(a , b) = (1 , 3)`
  * file = let-block = opened record (allow use/open/mutual statements)
  * dups | linearity ? on BindNames + FNames
  * BindName LName FName MFName overlap
  * use | open | mutual allowed in let-blocks / opened record
  * scoped HNames = path <.> field
  * re-generalise let-binds once escaped tvars resolved
  ? scope | dependency graph: imports / records / let-bindings / labelNames(!)
  ? imported names as inputs to the module?
  ? file | module (inter-)dependencies

## Beta-optimality:
  * λ Minimise normal forms on composition: Lambda encoding + lifting + sharing
  * Partial applications extracted and specialised for beta optimality
  * Fns passed as args must have interpretable format
## Error messages
  * Warn nonsense type joins | infer a dependent type
  * conflicting definitions (from pattern args , let bindings etc..)
  * mixfix parser errors & locations
## Unimportant
  * --math2 = 1 + 2 * 3 + 4 -- should be: (1 + (2 * 3)) + 4
  * switch to codeberg
  * Instantiation & Generalisation is also beta-reduction and could be improved
  * List comprehensions
  * cache version
  * Allow inspection of papped args
  * BitSetMap upgrades for [0..64] and sequential names [n..m]: rm Tuple
  * Pattern PTT: custom unPat function to support any patterns
  * optimise instantiation
  * avoid generalising type annotations; directly make a THBi rather than tvars
  * tycon let-bindings addresses (f = let l = .. in .. => `f.l`)
  * error messages via prettyprinter Doc
  * mergeTypes indicate whether merge was noop
  * check let-rec / mutual keyword (emit warning if not present)
  * make work module import loops
  * language server
  * optimize cached modules
  * sh syntax `ls -lr +x` => `ls { l=False , r=False , x=True }` (Str2Label primitives?)
  * engineer GlobalResolver to work concurrently
  * mergetyhead could indicate if merge was a noop (so bisub knows it has already seen that input)
  * Completion based on types (Type -> Bind)
  * after function with no free-vars generalised, can trim but not fully clear bisubs!
  * optimise co-occurences by merging instantly
  * 'StrIntName' new datatype, during parsing link growable vector + hashmap
  * Function = Constructor + rewrite rules ?
