## meta
  * surround notes: cs"' cs'<q> cst" ds" ysiw] cs]{ yssb ds{ds) ysiw<em>
  * https://documentation.divio.com/
## Top Priority (PathNames , tvar levels)
  * compiler pipeline
  * @ patterns; make case apps always labels (but fn Eqns always args)
  * expand lambda-mixfixes with explicit holes
  * resolve let-bound mixfixes to VLetBind qname
  * (Tuple ?) , toCStruct : {A} -> CStruct , fromCStruct : CStruct -> {A}
  * mixfix re-arrange let-ins `if y then let x = 3 in x else y` (Juxt x else y) or (; Juxt else y)
  * fix cache
  * rm meta from prettyCore
## Names + meta
  * make global resolver more like a standard module
    atm. AllBinds = QName -> (HName , Bind) ; Externs assumes module = [(HName , Expr)]
  ? dependency graph | arg,bind linearity
## ?
  * derived functions: specs / β-rewritings as terms under main function
  * freevar types added to type of let-binds; need to extract all let-blocks to regeneralise?
  * type application (eg. perfect tree)
  * subtype sum of record = [l : { f : int } | l2 : { f : int }] <: { f : int }
  * open sum type (default case branch)
  * audit oldcachedmodule , seems slightly broken (probably BindOpt)
  * trim bisubs
  * make solveScopes an anamorphism
## Parse
  * typed lambda case: \case : scrut -> ret
  * allow tabs instead of spaces
  * Pattern guards
  * Parse Intrinsics (eg. getFnName , getSourceLine , getSourceFile etc..)
  * repl parser: multiline case / let
## Types
  * Annotations (record , sum , TPi)
  * Ad-hoc polymorphism: `Int <: [ NumInt Int ]` show (esp for repl JIT)
  * THFieldCollision
  * Dependent normalisation
  * first class polymorphism
  * Linear types; dependent types required to quantify relative linearity `Lin t >= Lin f => t → u`
  * splitAt with Nils should also simplify
## Beta-optimality:
  * λ Minimise normal forms: λ-encoding + lifting + sharing (if subterms of App or Match contain λ, lift them)
  * case-splitters as data for runtime optimisation
  * Partial applications extracted and specialised for beta optimality
  * Fns passed as args must have interpretable format
  * fns that do case-splits lazy in arguments they may not need
## MachineCode
  * eliminate polymorphism
  * Identify recursive datas: then flatten and SOA form
  * convert all aggregates to Tuples + eliminate bicasts
  * Insert memory handling
  * explicit free-vars + β-optimality
  * SIMD
## Error messages
  * qualified bindings
  * Warn nonsense type joins | infer a dependent type
  * conflicting definitions (from pattern args , let bindings etc..)
  * mixfix parser errors & locations
  * Literal is out of Int range
## Unimportant
  * optimise tycons to avoid level retraversal
  * strictly positive recursion
  * underdetermined recursion: https://counterexamples.org/underdetermined-recursion.html
    equirecursive ⇒ A = F[A] ; B = F[B] ⇒ A = B (unsound for arbitrary type-level functions F!)
    if multiple solutions for X = F X; eg. F X = X ; A = Int ; B = String
  * the avoidance problem (types about to go out of scope)
  * don't assume injectivity!
  * Need totality checker, else a Refl type may not terminate and thus proves nothing
  * Advanced recursive types µ insufficient `PTree a = Leaves a | Cons (PTree (a , a))`
  * equality constraints are central to GADTs `Gabriel Scherer and Didier Rémy. GADTs meet subtyping.` `https://okmij.org/ftp/ML/first-class-modules/#GADT`
  * switch to codeberg
  * List comprehensions
  * cache version
  * Allow inspection of papped args
  * Pattern PTT: custom unPat function to support any patterns eg. `fact (<? 2) = 1`
  * avoid generalising type annotations; directly make a THBi rather than tvars
  * tycon let-bindings addresses (f = let l = .. in .. => `f.l`)
  * error messages via prettyprinter Doc
  * check let-rec / mutual keyword (emit warning if not present)
  * make work module import loops => read the files simultaneously
  * language server
  * optimize cached modules
  * sh syntax `ls -lr +x` => `ls { l=False , r=False , x=True }` (Str2Label primitives?)
  * engineer GlobalResolver to work concurrently
  * mergetyhead indicates if merge was a noop (so bisub knows it has already seen that input)
  * Completion based on types (Type -> Bind)
  * after function with no free-vars generalised, can trim but not fully clear bisubs!
  * optimise co-occurences by merging instantly
  * Function = Constructor + rewrite rules ?
  * `typeOf : (t : Type) -> Type` shortcut to access (and alias) an inferred type
  * treat module QNames as bruijn args and β-reduce them optimally?
