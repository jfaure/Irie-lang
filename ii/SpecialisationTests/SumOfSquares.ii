import prelude
-- Fusion
-- sumAppend n = sum [m * m | m <- [1..n]]
-- = foldl _+_ 0 (concatMap (\m => pure (m * m)) (enum 1 n)
nextEnum n i = case i >? n of
  True  => Done
  False => Yield i (1 + i)

nextConcatMap n i nest = case nest of
  @J (@Stream next s0) => case next s0 of
    @Done      => Skip i N
    @Skip s    => Skip i (J (Stream next s))
    @Yield y s => Yield y i (J (Stream next s))
  @N => case nextEnum n i of
    Done   => Done
    Skip i => Skip i N
    Yield x i => -- let 
--    nextRet x = \case
--      True  => Yield (x * x) False
--      False => Done
      Skip i (J (Stream (nextRet x) True))

nextRet x = \case
  True  => Yield (x * x) False
  False => Done

go n z s0 s1 = case nextConcatMap n s0 s1 of
  @Done        => z
  @Skip s q    => go n z s q
  @Yield x s q => go n (z + x) s q

-- Specialise
sumAppend n = go n 0 1 N
t = sumAppend 6 -- 55
