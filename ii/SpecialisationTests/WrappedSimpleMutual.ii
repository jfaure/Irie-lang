import prelude

-- TODO bug: g1 : ∏ A → A → %i32 → A
-- if written before g2 has correct %i32->%i32->%i32
bool2N = \case
  True  => 1
  False => 0

g2 z i (@Wrap next) s = case next s of
  @Done      => g1 z i
  @Yield x s => g2 (z + x) i (Wrap next) s

nextRet i x = case x of
  True  => Yield (i * i) False
  False => Done

g1 z i = if i >=? 10 then z else g2 z (i + 1) (Wrap (nextRet i)) True

--g1 z i = let
--  nextRet x = case x of
--    True  => Yield (i * i) False
--    False => Done
--  in if i >=? 10 then z else g2 z (i + 1) (Wrap nextRet) True


-- TODO wrong type %1 (g1 should not be polymorphic)
t = g1 0 1 -- 285
