-- Basic functions
_+_ = plus
g y = y + 2
f x = x + g x

self x = x x
--r a = r (add a 1)
--g x = g
ifE2 = ifThenElse
join a b = ifThenElse 1 a b
--s = join g g

--choose x = if x.p then x.q else x.q -- (puBool n {q:A} n {q:B}) -> (AnB) == {p:Bool;q:A} -> A
--chooseF t a b = if t then a else b
--r g = r (g 1) -- recursive principal type
--x = {f = x}
--combY f = let g x = f (x x) in g g

--fib x : Int -> Int = if x < 1 then x else fib (x-1) + fib (x-2)
--fib x = if x < 1 then x else fib (x-1) + fib (x-2)

--true = le 0 1
--r a = r
--join a b = if true then a else b
--s = join r r

-- TODO should simplify twice somehow
-- (a & b -> a) -> b -> a
-- (b & a -> c & b) -> a -> c
-- (c & a -> c) -> a -> c
-- (3 & 1 -> 4 & 3) -> 1 -> 4
-- (4 & 1 -> 4) -> 1 -> 4
-- twice f x = f (f x)
-- self x = x x

-- f x = f
