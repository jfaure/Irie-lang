-- n = non-assoc , a = assoc , r = rassoc , l = lassoc
--_._  { r12 } = navigation
_<<_ { a11 } = \f g a => f (g a)
_>>_ { a11 } = \g f a => f (g a)
_^_  { r10 } = pow

_B~_ { r9 }  = bitNOT
_!_ { l9 }  = readArray

_B&_ { a8 } = bitAND
_B&~_ { a8 }= bitANDN
_B<<_{ n8 } = bitSHL
_B>>_{ n8 } = bitSHR

_*_  { a7 } = mul
_/_  { l7 } = fdiv -- float division
_//_ { l7 } = div  -- integer division
_%_  { l7 } = frem

_B|_ { a6 } = bitOR
_B^_ { a6 } = bitXOR
_+_  { a6 } = add
_-_  { a6 } = sub

_<?_ { n5 } = lt
_<=?_{ n5 } = le
_>=?_{ n5 } = ge
_>?_ { n5 } = gt
_=?_ { n5 } = eq
_/=?_{ n5 } = ne

-- clz ctl popCount setBit testBit
-- bts (bit test and set)
--Â¬_   { a5 } = not
--not_ { a5 } = not

-- Short-circuit semantics require case inlining
-- also boolAND , boolOR
_and_{ a4 } = \a b => case a of {False => False ; True => b}
_or_ { a3 } = \a b => case a of {True => True ; False => b }

_->_ { r2 } = Arrow
_<_  { r1 } = \f a => f a
_>_  { a1 } = \a f => f a

ifThenElse cond a b = case cond of
  True  => a
  False => b

if_then_else_ { l0 } = ifThenElse

--identity : (a : Set) -> a
identity x = x

--Maybe a = data
--  Nothing
--  Just a

_|||_ {r2} = \l r => \case { @Left x => l x ; @Right x => r x }

fromMaybe a = \case
  @Nothing => a
  @Just x  => x

fst (a , b) = a
snd (a , b) = b

--setBit bits pos   = bitOR (bits (bitSHL 1 pos))
-- TODO mixfixes defined and used in same module appear to be broken
setBit bits pos   = bitOR bits (bitSHL 1 pos)
clearBit bits pos = bitAND bits (bitNOT (bitSHL 1 pos))
testBit  bits pos = bitAND bits (bitSHL 1 pos)
--setBit bits pos   = bits B| 1 -- (1 B<< pos)
--clearBit bits pos = bits B& bitNOT (1 B<< pos)
--testBit  bits pos = bits B& (1 B<< pos)

-- <_> = \x => x
