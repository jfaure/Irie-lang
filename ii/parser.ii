import imports/prelude
import imports/list
-- Main : IO
-- IO = ##
--   ret    : %i8
--   fileIO : { In , Out }

-- Text = [ N : { Char , Text } | Z : {} ]
-- Pretty a = { ret : a , pretty : a -> Text }
--ParseState a = ##
--  stream : String
--  ret    : a

--Parser a = ParseState b -> ParseState a
--runParser : ParseState a -> ParseState -> Maybe a

--Maybe a =
-- | Nothing : Maybe a
-- | Just    : a -> Maybe a

--List a =
-- | Z : List a
-- | N : a -> (List a -> List a)
--
-- String =
--  | Null : String
--  | Next : Char -> (String -> String)

pure x ps = (ps . ret . set x) . cok . set 1
fmap f x = x . ret . over f
<*> fs a  = a . ret . over (fs . ret) -- ? need to merge the records
liftA2 f x = <*> (fmap f x)

-- --parser primitives
-- parseOK pstate = pstate . cok . set 1
-- parseKO pstate = pstate . cok . set 0
-- --_<|>_ = \pa pb pstate => ifThenElse ((pa pstate) . cok) (pa pstate) (pb pstate)
-- choose = \pa pb pstate => ifThenElse ((pa pstate) . cok) (pa pstate) (pb pstate)
-- optional v = choose v \ps => ps . cok . set 0

-- -- : f a -> f [a]
--some v = liftA2 (\a b => Next a b) v (many v)
--many v = choose (some v) (pure Null)

-- satisfy pred pstate = case pstate . stream of
--   | Next x xs => pstate . set (ifThenElse (pred x) { cok = 0 , stream = xs , ret = x } { cok = 0 })
--   | Null      => parseKO pstate

-- eof pstate = case pstate . stream of
--   | Null      => parseOK pstate
--   | Next x xs => parseKO pstate

-- --x y = eq y 3
-- xd c = satisfy (\x => eq x c)
-- char c = satisfy (eq 'B')
--
-- -- --makeGlobP : String -> Parser [String]
-- makeGlobP gs = let
-- --globAny xs = let next = makeGlobP xs in next <|> many (notFollowedBy next > takeP 1)
-- --globAny xs = many (satisfy (eq 'B')) <|> makeGlobP xs
--   globAny = many (satisfy (eq 'B'))
--   in case gs of
--    | Null      => eof
--    | Next x xs => ifThenElse (eq x '*') (globAny xs) (satisfy (eq x) >> makeGlobP xs)
--  --[]       -> eof
--  --'*' , xs -> globAny xs
--     -- also [...] ? + !

--runParser parseFn str = parseFn { stream = str , cok = 1 , ret = () }
--test = runParser (makeGlobP "*c")

-- Stream: tokensToChunk, chunk2Tokens, chunkLength, take1_, takeN, takeWhile_
-- Parsec: parseError, label, try, lookAhead, notFollowedBy, withRecovery, observing, eof, token, tokens, takeWhileP, takeWhile1P, takeP, getParserState, updateParserState
