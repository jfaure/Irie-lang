import imports/prelude
import imports/list
--import imports/list2

{-
--some v = let
--  manyv = somev <|> pure Nil
--  somev = ((\a b => Cons a b) <$> v) <*> manyv
--  in somev

--many v = let
--  many_v = some_v <|> pure Nil
--  some_v = (\a b => Cons a b) <$> v <*> many_v
--  in many_v
-}

--newtype ParsecT e s m a = ParsecT { unParser :: forall b.
--  State s e ->
--  (a -> State s e -> Hints (Token s) -> m b) -> -- consumed-OK
--  (ParseError s e -> State s e -> m b) -> -- consumed-error
--  (a -> State s e -> Hints (Token s) -> m b) -> -- empty-OK
--  (ParseError s e -> State s e -> m b) -> -- empty-error
--  m b
--  }
-- ParseState :
--   state  : { input : Stream , offset : Int }
--   → cok : a          -> ParseState -> m b
--   → cko : ParseError -> ParseState -> m b
--   → eok : a          -> ParseState -> m b
--   → eko : ParseError -> ParseState -> m b
--   → m b
-- ErrorItem t = Tokens (NonEmpty t) | Label (NonEmpty Char) | EndOfInput

unParser (Parser p) = p
pTakeP n = @Parser \s cok _ _ eko ⇒ let
  split = splitAt n s.input
  in if length split.l /=? n then eko "Bad length"
    else cok split.l (s.input.set (split.r))

pTakeWhileP f = @Parser \s cok _ eok _ ⇒ let
  spli = span f s.input
  in if null spli.l
    then eok spli.l s
      else cok spli.l (s.input.set spli.r)

pEof = @Parser \s _ _ eok eko ⇒ if null s.input
  then eok () s else eko "expected eof" s

pTry p = @Parser \s cok _ eok eko ⇒ let
  ko e _ = eko e s
  in unParser p s cok ko eok ko -- override kos

pMap f p = @Parser \s cok cko eok eko ⇒
  unParser p s (cok << f) cko (eok << f) eko
pPure x = @Parser \s _ _ eok _ ⇒ eok x s
pAp m k = @Parser \s cok cko eok eko ⇒ unParser m s
 (\x s2 ⇒ unParser k s2 (cok << x) cko (cok << x) cko) cko
   (\x s2 ⇒ unParser k s2 (cok << x) cko (eok << x) eko) eko
pBind m k = @Parser \s cok cko eok eko ⇒ unParser m s
 (\x s2 ⇒ unParser (k x) s2 cok cko cok cko) cko
   (\x s2 ⇒ unParser k s2 (k x) cko eok eko) eko
pZero = @Parser \s _ _ _ err ⇒ err "nothing" s
pPlus m n = @Parser \s cok cko eok eko ⇒ let
  mko err ms = let
    ncko err s2 = cko "err1" ms -- ms longest match ms s2
    neok x s2   = eok x s2
    neko err s2 = eko "err2" ms -- longest match ms s2
    in unParser n s cok ncko neok neko
  in unParser m s cok cko eok mko -- override eko

runParser p s = unParser p s (\a s ⇒ @COK s a)
  (\err s ⇒ @CKO err) (\a s ⇒ @EOK a) (\err s ⇒ @EKO err)

--p1 = runParser pEof { input = @Nil }

--------------
-- Parser.ii
--------------
{-
import imports/prelude
import imports/list
-- Main : IO
-- IO = ##
--   ret    : %i8
--   fileIO : { In , Out }

-- Text = [ N : { Char , Text } | Z : {} ]
-- Pretty a = { ret : a , pretty : a -> Text }
--ParseState a = ##
--  stream : String
--  ret    : a

--Parser a = ParseState b -> ParseState a
--runParser : ParseState a -> ParseState -> Maybe a

--Maybe a =
-- | Nothing : Maybe a
-- | Just    : a -> Maybe a

--List a =
-- | Z : List a
-- | N : a -> (List a -> List a)
--
-- String =
--  | Null : String
--  | Next : Char -> (String -> String)

pure x ps = (ps . ret . set x) . cok . set 1
fmap f x = x . ret . over f
<*> fs a  = a . ret . over (fs . ret) -- ? need to merge the records
liftA2 f x = <*> (fmap f x)

-- --parser primitives
-- parseOK pstate = pstate . cok . set 1
-- parseKO pstate = pstate . cok . set 0
-- --_<|>_ = \pa pb pstate => ifThenElse ((pa pstate) . cok) (pa pstate) (pb pstate)
-- choose = \pa pb pstate => ifThenElse ((pa pstate) . cok) (pa pstate) (pb pstate)
-- optional v = choose v \ps => ps . cok . set 0

-- -- : f a -> f [a]
--some v = liftA2 (\a b => Next a b) v (many v)
--many v = choose (some v) (pure Null)

-- satisfy pred pstate = case pstate . stream of
--   | Next x xs => pstate . set (ifThenElse (pred x) { cok = 0 , stream = xs , ret = x } { cok = 0 })
--   | Null      => parseKO pstate

-- eof pstate = case pstate . stream of
--   | Null      => parseOK pstate
--   | Next x xs => parseKO pstate

-- --x y = eq y 3
-- xd c = satisfy (\x => eq x c)
-- char c = satisfy (eq 'B')
--
-- -- --makeGlobP : String -> Parser [String]
-- makeGlobP gs = let
-- --globAny xs = let next = makeGlobP xs in next <|> many (notFollowedBy next > takeP 1)
-- --globAny xs = many (satisfy (eq 'B')) <|> makeGlobP xs
--   globAny = many (satisfy (eq 'B'))
--   in case gs of
--    | Null      => eof
--    | Next x xs => ifThenElse (eq x '*') (globAny xs) (satisfy (eq x) >> makeGlobP xs)
--  --[]       -> eof
--  --'*' , xs -> globAny xs
--     -- also [...] ? + !

--runParser parseFn str = parseFn { stream = str , cok = 1 , ret = () }
--test = runParser (makeGlobP "*c")

-- Stream: tokensToChunk, chunk2Tokens, chunkLength, take1_, takeN, takeWhile_
-- Parsec: parseError, label, try, lookAhead, notFollowedBy, withRecovery, observing, eof, token, tokens, takeWhileP, takeWhile1P, takeP, getParserState, updateParserState
-}
