-- Asm examples
-- unfold to stack : (s -> Maybe (Char , s)) -> s -> ((Nat , CString) -> a) -> a
-- import prelude
-- -- Int -> Maybe (Char , Int)
-- nextDigitU n = divMod n 10 > \(q , r) => if q =? 0 && r =? 0 then Void else Just (chr (48 + r) , q)
-- itoa n = withUnfoldL nextDigitU n (\len str => putsN str len)

-- TODO count eras through case
-- ! retLocs must be respected. arg locs may be reassigned (mov Vs push, overwrite v call)
-- ?? args <=> regs. (args have dup info , regs are direct currency of asm)
-- eg. bruijnArg RDI -> dup RDI => x RDI (RDI maybe destroyed)
--  -> ccalling conv RDI -> recover x
--   RetLoc -- binOp hints (need commutative register)
--  /  op  \ One branch should use retloc. Regs may be dup / calling convs involved
--fac n = case lt n 2 of
--  True  => n
--  False => mul n (fac (sub n 1))

-- mov vs push (overwrite vs call preserve)
--alg x y = add x (mul x y)

--∏ A → (A → %i8 → (%i32 ⊓ A)) → (%i32 ⊓ A) → %ptr(PrimInt 8) → %i32
--foldl fn z str = case nullString str of
--  True => add 0 z
--  False => (\(head , tail) => foldl fn (fn z head) tail) (unConsString str)
--atoi str = foldl (\acc c => add (sub (ord c) 48) (mul acc 10)) 0 str : String -> Int

--pap = add 3
--pap x y = x -- why makes bruijnAbsTyped?

--algebra x y z = add 5 (add x (mul (sub y 2) z))

--plus1 x y = add x y
--plus2 (x , y) = add x y
--id x = x
--ff x = id (add x 3)
