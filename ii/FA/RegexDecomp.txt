--https://branchfree.org/2018/05/30/smh-the-swiss-army-chainsaw-of-shuffle-based-matching-sequences/
--https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos302-mytkowicz.pdf
--https://www.usenix.org/system/files/nsdi19-wang-xiang.pdf
--https://branchfree.org/category/simd/
--https://branchfree.org/2019/03/06/code-fragment-finding-quote-pairs-with-carry-less-multiply-pclmulqdq/

-- fast-string matching coordinates FAs
-- Keep track of state of string matching
-- trigger FA only when all strings and FA components match
-- Glushkov NFA (no ε-transitions)

-- LinearRegex = FA String FA String .. FA
-- FA has switch (off by default except leftmost FA)
-- 1. str-match: Scan entire input for all strs, may trigger neighbor FA matching
-- 2. for general /left FA str right/ where left,right are arbitrary components: only if all of left are matched does FA switch on.

r/.*foo[ˆX]barY+/
/".*" 'foo' "[ˆX]" 'bar' "Y+"/

"XfooZbarY" => finds 'foo' => trigger ".*" since leftmostFA always on
  => "[ˆX]" switched on => find 'bar' => match "[ˆX]", turn on "Y+" for remaining input
"XfoZbarY" => finds 'bar' => "[ˆX]" , but is off, so KO
-- track input offsets of matched strings

Alternations (A|B)
  | A and B decomposable => mk 2 regexes 
  | => mk FA for (A|B)
recursively apply to convert all alternations into linear regexes

tricky: /b[il1]l/ => "bil|bll|b1l"
