-- PCLMULQDQ
-- abc xxx "foobar" zzz "a"
-- cmpeq_epi8 (set1_epi8 '"')
-- 000000001000000100000101
-- ? â†“
-- 00000000.111111.00000.1.

-- this is parallel prefix over XOR of the bits
--'parity'; on if odd-number count of on bits to its left
-- This is a (\input -> _mm_clmul_epi64_si128 input (_mm_set1_ei8 0xFF) 0)
-- then _mm_cvtsi128_si64
-- Only weirdness; is accounting for previous quoting status

--really_inline uint64_t find_quote_mask_and_bits(
--    __m256i input_lo, __m256i input_hi, uint64_t odd_ends,
--    uint64_t &prev_iter_inside_quote, uint64_t &quote_bits) {
--  quote_bits = cmp_mask_against_input(input_lo, input_hi, _mm256_set1_epi8('"'));
--  quote_bits = quote_bits & ~odd_ends;
--  uint64_t quote_mask = _mm_cvtsi128_si64(_mm_clmulepi64_si128(
--      _mm_set_epi64x(0ULL, quote_bits), _mm_set1_epi8(0xFF), 0));
--  quote_mask ^= prev_iter_inside_quote;
--  // right shift of a signed value OK
--  prev_iter_inside_quote=static_cast<uint64_t>(static_cast<int64_t>(quote_mask) >> 63);
--  return quote_mask;

--https://branchfree.org/2019/03/06/code-fragment-finding-quote-pairs-with-carry-less-multiply-pclmulqdq/
