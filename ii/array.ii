-- Arrays basic
--l = 3 2 7 -- : Array 3 Int
--z = l ! 1

--Array : [Int] -> Set -> Set
--Array shape ty =
-- | PrimArray [ty]
-- | Generate (Int->ty)
-- | Reversed (Array ty)
-- | Tabulate ((Array Int [len shape]) -> ty)

--shapeOf :: { n ; X } : Array n X -> [Int]
--shapeOf@{n} = n

--primFoldrN f x v n = if n < 1 then f (x!0) v else f (x!n) (primFoldrN f x v (n-1))
--primFoldr f x v = primFoldrN f x v (primLen x)
--plus a b = a + b
--t = primFoldrN plus (2 3 3) 0 3

--mean : [Int] -> Int
--mean a = primFoldr plus a 0 + (primLen a)

--id x   = x
--idot n = Generate @ id n
--t = idot (2 3)

