import imports/fin
--Pi = (n : Int) -> (IntN n)
--i32 = Pi 32

--Eq a b = | Refl : Eq a a

Nat =
 | Z : Nat
 | S : Nat -> Nat
--One : Nat = S Z
----three = S (S (S Z))
--add : Nat -> (Nat -> Nat)
--add x = \case | Z => x | S y => add x y

--two = add One One
two = S (S Z)

-- Classic Dependent vector
Vec (v : Set) : Nat -> Set =
 | empty : Vec v Z
 | ++ : (n : Nat) -> v -> Vec v n -> Vec v Z --(S n) -- : { n ; (x:v) ; Vec v n } <: Vec v (n + 1)

--z = empty
--one = ++ 1 3 z

Fin : Nat -> Set =
 | fZ : Fin (S Z)
 | fS :: { n : Nat } : Fin n -> Fin (S n)

f1 = fS fZ

lookup :: { n : Nat ; A : Set } : Fin n -> (Vec A n -> A)
lookup = \case
 | fZ   => \case ++ x xs => x
 | fS i => \case ++ x xs => lookup i xs

-- ΠΣ says:
--Vec : Type → Nat → Type;
--Vec = λA n → (l : {nil cons }) ∗ case l of
--  nil → EqNat zero n
--  cons → (n0 : Nat) ∗ A ∗ (Rec [Vec A n0 ]) ∗ EqNat (suc n0) n
--Fin : Nat → Type;
--Fin = λn → (l : {zero suc }) ∗ case l of
--  zero → (n 0 : Nat) ∗ EqNat (suc n0) n
--  suc → (n 0 : Nat) ∗ (Rec [Fin n0 ]) ∗ EqNat (suc n0) n

--_⊛_ :: {n} : Vec (A → B) n -> Vec A n -> Vec B n
--[] ⊛ _        = []
--(f ++ fs) ⊛ (x ++ xs) = f x ++ (fs ⊛ xs)

--Matrix : Set -> ℕ -> ℕ -> Set
--Matrix a n m = Vec (Vec a m) n

--type Tree (n : Nat) (a : Type) where
--  Leaf : a -> Tree Zero a
--  Fork : forall m . (Tree m a) -> (Tree m a) -> Tree (Succ m) a

--Tree (a : Set) : Nat -> Set =
-- | Leaf : Tree a 0 -- () <: Tree a 0
-- | Sapling :: {m} : a -> Tree a m -> Tree a (+m 1) -- λ{a ; m} -> { {a ; m} }
-- | Fork :: {m} : (Tree a m) -> (Tree a m) -> Tree a (+ m 1)

--Σ (A : Set) (B : A → Set) : Set =
-- | _,_ : (a : A) → (b : B a) → Σ A B
