-- See also Effnotes.txt
-- Monad , foldM , and array write
foldM f z xs = foldl (\acc x => acc >>= \b => f b x) (pure z) xs
-- foldl (>=>) pure (replicate n addGet) 0

-- A snoc list
_>>=_ { l1 } = \(Free fx f) g => Free fx (f >=> g)
f >=> g = \x => f x >>= g

-- t is an effect that can be used with other effects
send : ∀r -> t v -> Eff (r & t) v
send t = Free t Pure -- singleton Pure

--read  : ∀x. Array x -> Nat -> ArrayM x
--read v i = send (Read v i)
--write : ∀x. Array x -> Nat -> x -> ArrayM ()
--write

-- qApp (apply arg to composition of fns), needs to |><| effects
Freer f a = gadt
  Pure a : Freer [] a
  Free   : ∀x -> f x -> (x -> Freer f a) -> Freer f a -- >>= snoclist
  Seq    : _
Pure x   >>= k = k x
Free u q >>= k = Free u (q |> k) -- snoclist _>>=_ is left associative

Reader i x = gadt
  Get : Reader i i

ask = ∀r i -> Eff (r & Reader i)
ask = Free Get Pure -- send Get

-- >>= is simple snoclist
-- handling effects requires looking at head of snocList
-- qApp applies arg to a composition of fns:
--  gives arg to head of seq and leaves tail unchanged (needs front of list!)
qApp q k = case (head q) x of
  Pure y   >>= k => qApp k y
  Free u q >>= k => Free u (q |><| k)

-- Loop over the free monad, case out any Get operations
runReader : i -> Eff (Reader i & r) a -> Eff r a
runReader i m = loop m where loop = \case
  Pure x   => Pure x
  Free u q => case u of
    Get -> loop (qApp q i)  -- give i arg to head of "Free" snoclist
    _   -> Free u (loop << qApp q) -- loop over the snoclist

-- * Filter all 'Get' operations by function composition
handleRelay : (a -> Eff r w) -> (∀ v ~> t v -> Arr v w -> Eff r w) -> Eff (t ': r) a
  -> Eff r w
-- v ? turn a function of a sumtype into a guard? | union case statements?
-- decomp : [A | ..] -> ([A] , [..])
runReader i = handleRelay pure (\Get k => k i)

test arr = readArray arr 0 >>= writeArray arr 0
