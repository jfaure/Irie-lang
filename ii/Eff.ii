-- free: left adjoint of a forgetful operation
-- f is the "request signature"
-- Iries datatypes are open via subtyping, so no hacks needed on top of this
data Freer f a =
  Pure a
  Free (f x) (x -> Freer f a)

Reader i x = { Get : FReaderWriter i i }
Writer o x = { Put : o -> Writer o ()  }

-- left-associated list appends is slow;
-- instead use a "type-aligned sequence"
_>>=_ { l1 } = \(@Free fx k’) k => Free fx (k’ >=> k)

ask :: Member (Reader i) r => Eff r i
ask = Impure (inj Get) (tsingleton Pure)

send :: Member t r => t v -> Eff r v
send t = Impure (inj t) (tsingleton Pure)

addGet :: Int -> Eff (Reader Int) Int
addGet x = ask >>= \i => Pure (i + x)

addN :: Int -> Eff (Reader Int) Int
addN n = foldl (>=>) Pure (replicate n addGet) 0

-- qApp q x applies x to a composition of functions
-- It applies x to the head of sequence k "tacks in" the tail
qApp :: Arrs r b w → b → Eff r w
qApp q x = let
  bind' : Eff r a -> Arrs r a b -> Eff r b
  bind’ (Pure y) k = qApp k y
  bind’ (Impure u q) k = Impure u (q BC k)
  in case tviewl q of
  TOne k -> k x
  k :| t -> case (k x) of
    Pure y   => qApp k y -- bindEff would be just k y
    Free u q => Free u (q |> k)

bindEff (Pure y)   k => k y
bindEff (Free u q) k => Free u (q |> k)

-- ! explicitly open sum type
runReader :: i -> Eff ([Reader i] | r) a -> Eff r a
runReader i m = let
  loop (Pure x) = Pure x
  loop (Impure u q) = case u of
    Get -> loop (qApp q i)
    u   -> Impure u (tsingleton (qComp q loop)) -- qComp g h = h << qApp g
  in loop m

-- TODO builtin Identity label with subtypes (a <: Identity a) and (Identity a <: a)
run :: Eff [] a -> a
run (Pure a) = a
