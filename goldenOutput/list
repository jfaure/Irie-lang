length = ∏ A → µa.[Nil | Cons {⊤ , a}] → (%i1 ⊔ %i32)
printList = ∏ A → µa.[Nil | Cons {%i32 , a}] → (%i1 ⊔ %i32)
scanSum = ∏ A → %i32 → a → µa.[Cons {%i32 , a}]
take = ∏ A B C → %i32 → µb.[Nil | Cons {A , b}] → µc.[Nil | Cons {A , c}]
takeWhile = ∏ A B C → (A → [!False | !True]) → µb.[Nil | Cons {A , b}] → µc.[Nil | Cons {A , c}]
drop = ∏ A B → %i32 → (µa.[Nil | Cons {⊤ , a}] ⊓ B) → ([Nil] ⊔ B)
null = [Nil | Cons {⊤ , ⊤}] → %i1
singleton = ∏ A → A → [Cons {A , [Nil]}]
repeat = ∏ A B → A → µb.[Cons {A , b}]
splitAt = ∏ A B C → %i32 → ([Nil | Cons {A , B}] ⊓ B) → {!0 : µc.[Nil | Cons {A , c}] , !1 : ([Nil] ⊔ B)}
span = ∏ A B → (A → [!False | !True]) → µb.[Nil | Cons {A , b}] → {l : µb.[Nil | Cons {A , b}] , r : µb.[Nil | Cons {A , b}]}
foldr = ∏ A B C → (A → B → B) → B → µc.[Nil | Cons {A , c}] → B
foldl = ∏ A B C → (A → B → A) → A → µc.[Nil | Cons {B , c}] → A
append = ∏ A B C → µb.[Nil | Cons {A , b}] → c → µc.[Cons {A , c}]
_++_ = ∏ A B C → µb.[Nil | Cons {A , b}] → c → µc.[Cons {A , c}]
concat = ∏ A B C D → µc.[Nil | Cons {µb.[Nil | Cons {A , b}] , c}] → µd.[Nil | Cons {A , d}]
consF = ∏ A B C → (A → B) → A → C → [Cons {B , C}]
mapFold = ∏ A B C D → (A → B) → µc.[Nil | Cons {A , c}] → µd.[Nil | Cons {B , d}]
map = ∏ A B C D → (A → B) → µc.[Nil | Cons {A , c}] → µd.[Nil | Cons {B , d}]
concatMap = ∏ A B C D E → (A → µc.[Nil | Cons {B , c}]) → µd.[Nil | Cons {A , d}] → µe.[Nil | Cons {B , e}]
unlines = ∏ A B C D → µc.[Nil | Cons {µb.[Nil | Cons {A , b}] , c}] → µd.[Nil | Cons {(%i8 ⊔ A) , d}]
unfoldr = ∏ A B C → (A → [Nothing | Just {{val : B , seed : A}}]) → A → µc.[Nil | Cons {B , c}]
filter = ∏ A B C → (A → [!False | !True]) → µb.[Nil | Cons {A , b}] → µc.[Nil | Cons {A , c}]
reverse = ∏ A B C → µb.[Nil | Cons {A , b}] → µc.[Nil | Cons {A , c}]
scanl = ∏ A B C D → (A → B → A) → A → µc.[Nil | Cons {B , c}] → µd.[Nil | Cons {A , d}]
enumFromTo = ∏ A → %i32 → %i32 → µa.[Nil | Cons {%i32 , a}]
elemBy = ∏ A B C → (A → B → [!False | !True]) → B → µc.[Nil | Cons {A , c}] → [!False | !True]
