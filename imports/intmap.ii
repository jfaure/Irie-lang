import imports/prelude

-- Prefix = Int
-- Mask   = Int
-- IntMap a
-- = Bin Prefix Mask (IntMap a) (IntMap a) -- prefix of a key up to (not incl.) the switching bit
-- | Tip Key a
-- | Nil

--insertLookupWithKey f k x t = case t of
--  Bin p m l r => if nomatch k p m then (Nothing , link k (Tip k x) p t)
--    else if zero k m then (let (found , l2) = insertLookupWithKey f k x r in (found , Bin p m l2 r)) else (let (found , r2) = insertLookupWithKey f k x r in (found , Bin p m l r2))
--  Tip k y     => if k =? ky then (Just y , Tip k (f k x y)) else (Nothing , link k (Tip k x) ky t)
--  None        => (Nothing , Tip k x)

zero i m = i B& m =? 0
lookup k = \case
  Bin p m l r ⇒ if zero k m then lookup k l else lookup k r
  Tip kx x    ⇒ if k =? kx then Just x else Nothing
  None        ⇒ Nothing
