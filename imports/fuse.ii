{-
-- Unwrapped
bool2N = \case
  True  => 1
  False => 0

go2 z i next s = case next s of
  Done      => go1 z i
  Yield x s => go2 (add z x) i next s

go1 z i = let
  nextRet x = case x of
    True  => Yield (mul i i) False
    False => Done
  in ifThenElse (ge i 10) z (go2 z (add i 1) nextRet True)
-}


{-
-- Wrapped
bool2N = \case
  True  => 1
  False => 0

go2 z i (Wrap next) s = case next s of
  Done      => go1 z i
  Yield x s => go2 (add z x) i (Wrap next) s

go1 z i = let
  nextRet x = case x of
    True  => Yield (mul i i) False
    False => Done
  in ifThenElse (ge i 10) z (go2 z (add i 1) (Wrap nextRet) True)
-}

{-
-- Full example
fromMaybe x = case x of
  Nothing => 0

nextEnum n = case bool2Bool (ge n 10) of
  True  => Done
  False => Yield n (add 1 n)
bool2Bool i = ifThenElse i True False

nextConcatMap i Nothing = case nextEnum i of
  Done   => Done
  Skip i => Skip i Nothing
  Yield x i => let
    nextRet x True  = Yield (mul x x) False
    nextRet x False = Done
    in Skip i (Just (Stream (nextRet x) True))
nextConcatMap i (Just (Stream next s0)) = case next s0 of
  Done      => Skip i Nothing
  Skip s    => Skip i (Just (Stream next s))
  Yield y s => Yield y i (Just (Stream next s))

go z s0 s1 = case nextConcatMap s0 s1 of
  Done        => z
  Skip s q    => go z s q
  Yield x s q => go (add z x) s q

sumAppend = go 0 1 Nothing
-}

--nextAppend (Left input) = case nextEnum input of
--  Done       => Skip    (Right 0 5)
--  Skip xs    => Skip    (Left xs)
--  Yield x xs => Yield x (Left xs)
--nextAppend (Right ys) = case nextEnum ys of
--  Done       => Done
--  Skip bs    => Skip    (Right bs)
--  Yield x ys => Yield x (Right ys)


