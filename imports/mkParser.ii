import imports/prelude
import imports/foldr

drop n xs = if n <=? 0 then xs else case xs of
  @Nil => Nil
  @Cons x ys => drop (n - 1) ys

fromCString str = let
  go (ok , val , str2) = if ok then @Cons val (go (nextElem str2)) else @Nil
  in go (nextElem str)

--1. String matching: scan all input to find all strs, then trigger FA matching
--2. each FA has execution switch (starts off except leftmost)
--3. /left , FA str , right/ => if all components left of an FA are matched, switch on and run FA if str is found, if FA matches switch right on
-- eg. /.*foo[ˆX]barY+/
-- => .* "foo" [ˆX]  "bar" Y+
FA t a =
 | Str String (String -> a)
 | Many FA (t -> a)
 | Try FA (t -> a) FA (t -> a)

--runParse : String -> LR a -> Maybe a
-- runParse = \case
--  @TakeN     n => _ --splitAt n str
--  @Takewhile f => _
--  @String x    => _
--  @Alt a b     => _
--  @LookAhead a => _
--  @EOF         => _
