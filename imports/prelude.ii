-- n = non-assoc , a = assoc , r = rassoc , l = lassoc
--_._  { r12 } = navigation
_<<_ { a11 } = \f g a => f (g a)
_>>_ { a11 } = \g f a => f (g a)
_^_  { r10 } = pow

_B~_ { r9 }  = bitNOT

_B&_ { a8 } = bitAND
_B<<_{ n8 } = bitSHL
_B>>_{ n8 } = bitSHR

_*_  { a7 } = mul
_/_  { l7 } = fdiv -- float division
_//_ { l7 } = div  -- integer division
_%_  { l7 } = frem

_B|_ { a6 } = bitOR
_B^_ { a6 } = bitXOR
_+_  { a6 } = add
_-_  { a6 } = sub

_<?_ { n5 } = lt
_<=?_{ n5 } = le
_>=?_{ n5 } = ge
_>?_ { n5 } = gt
_=?_ { n5 } = eq
_/=?_{ n5 } = ne

--Â¬_   { a5 } = not
--not_ { a5 } = not

--_and_{ a4 } = boolAND
--_or_ { a3 } = boolOR

_->_ { r2 } = Arrow
_<_  { a1 } = \f a => f a
_>_  { a1 } = \a f => f a

if_then_else_ { l0 } = ifThenElse

identity (a : Set) -> a
identity x = x

{-
-- mixfix tests
plus = _+_
zero   = 0 + 0
one    = 0 + add 1 2
prec1  = 0 + 1 * 2
prec2  = 0 * 1 + 2
prec3  = 0 * add 1 2 + 3
lassoc = 0 + 1 + 2
rassoc = Int -> Double -> Bool
brac   = [ 3 ]
brac2  = [ add 2 1 ]
if1    = if 0 then 3 else 4
if2 = if 0 then 1 else if 1 then 3 else 4
if3 = if 1 then 5 else 0 * 2 * 9
megaIf = if 1 then 5 + 1 else 0 * 7 * 9
--plus = _+_
-}
