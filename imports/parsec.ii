import imports/prelude
import imports/list
import imports/list2

{-
--some v = let
--  manyv = somev <|> pure Nil
--  somev = ((\a b => Cons a b) <$> v) <*> manyv
--  in somev

--many v = let
--  many_v = some_v <|> pure Nil
--  some_v = (\a b => Cons a b) <$> v <*> many_v
--  in many_v
-}

--newtype ParsecT e s m a = ParsecT { unParser :: forall b.
--  State s e ->
--  (a -> State s e -> Hints (Token s) -> m b) -> -- consumed-OK
--  (ParseError s e -> State s e -> m b) -> -- consumed-error
--  (a -> State s e -> Hints (Token s) -> m b) -> -- empty-OK
--  (ParseError s e -> State s e -> m b) -> -- empty-error
--  m b
--  }
-- ParseState :
--   state  : { input : Stream , offset : Int }
--   → cok : a          -> ParseState -> m b
--   → cko : ParseError -> ParseState -> m b
--   → eok : a          -> ParseState -> m b
--   → eko : ParseError -> ParseState -> m b
--   → m b
-- ErrorItem t = Tokens (NonEmpty t) | Label (NonEmpty Char) | EndOfInput

unParser (Parser p) = p
pTakeP n = @Parser \s cok _ _ eko ⇒ let
  split = splitAt n s.input
  in if length split.l /=? n then eko "Bad length"
    else cok split.l (s.input.set (split.r))

pTakeWhileP f = @Parser \s cok _ eok _ ⇒ let
  spli = span f s.input
  in if null spli.l
    then eok spli.l s 
      else cok spli.l (s.input.set spli.r)

pEof = @Parser \s _ _ eok eko ⇒ if null s.input
  then eok () s else eko "expected eof" s

pTry p = @Parser \s cok _ eok eko ⇒ let
  ko e _ = eko e s
  in unParser p s cok ko eok ko -- override kos

pMap f p = @Parser \s cok cko eok eko ⇒
  unParser p s (cok << f) cko (eok << f) eko
pPure x = @Parser \s _ _ eok _ ⇒ eok x s
pAp m k = @Parser \s cok cko eok eko ⇒ unParser m s
 (\x s2 ⇒ unParser k s2 (cok << x) cko (cok << x) cko) cko
   (\x s2 ⇒ unParser k s2 (cok << x) cko (eok << x) eko) eko
pBind m k = @Parser \s cok cko eok eko ⇒ unParser m s
 (\x s2 ⇒ unParser (k x) s2 cok cko cok cko) cko
   (\x s2 ⇒ unParser k s2 (k x) cko eok eko) eko
pZero = @Parser \s _ _ _ err ⇒ err "nothing" s
pPlus m n = @Parser \s cok cko eok eko ⇒ let
  mko err ms = let
    ncko err s2 = cko "err1" ms -- ms longest match ms s2
    neok x s2   = eok x s2
    neko err s2 = eko "err2" ms -- longest match ms s2
    in unParser n s cok ncko neok neko
  in unParser m s cok cko eok mko -- override eko

runParser p s = unParser p s (\a s ⇒ @COK s a)
  (\err s ⇒ @CKO err) (\a s ⇒ @EOK a) (\err s ⇒ @EKO err)

p1 = runParser pEof { input = @Nil }
