-- let-scope depends on parse
-- letscopeAfterMixfix y = if y then let x = 3 in x else y

-- ? make top-level lambda over entire module to resolve patterns
-- (f , g) = (2 , 3)

-- let-bound mixfix => make VLetBind instead of QName
-- poly1 = let _<_ = \f a => f a in (\y => y.t) < { t = 1 }  -- %i1

--rect (P : Set) : Set = record
--Recangle = record
--  f : Int
--  g : Int
--import prelude
--import list
--import list2
--import tree
--import question
--import ls
--import foldr
--import question
--import Free
--import parsec
--import intmap

--import stream
--main = ls "hello"
--import imports/TreeStream

--f = \case { @x b | @y <- b => 1 } -- doesn't parse

-- Merge equations properly, this creates 2 bindings and bugs out inames
-- Also disallow extra names between the equations (scoped fields?)
--eq1 (@x) b = 2
--eq1 a b = 3

-- Re-generalise let-binds + Add free-variables into type to codegen let-binds

-- Label namespaces + label application
--f x = label x x -- check if label in scope as label ? or requrie @
--f (x a) = a
--g = \case
--  x => x -- Always label

-- import imports/prelude
-- x = True -- Ambiguous binding (@True OK)

-- g (x a) = a -- no '@', so x uses bind-name not label name

-- tvars must never refer to deeper let-nest tvars through their bounds
-- need to save state tvars => only biunify with instantations not the escaped tvar
--lp17 f = let r x g = { a = g x , b = f x } in { u = r 0 (add 1) , v = r {t = 1} (\y => y.t)}
-- ∏ A → ((%i1 ⊔ {t : %i1}) → A) → {u : {a : %i32 , b : A} , v : {a : %i1 , b : A}}

-- Need to accurately delegate generalisation to first mutual
-- import imports/sumMul

-- lost some μ-bounds
-- import imports/foldr
-- nonEmptySubSequences = \case -- [a] -> [[a]]
--   @Nil       => Nil
--   @Cons x xs => let
--     f ys r = Cons ys (Cons (Cons x ys) r)
--     in Cons (Cons x Nil) (foldr f Nil (nonEmptySubSequences xs))

--list2.unwords = merge μ-bounds upwards even if layer not equal

-- multi-branch different μ merging =>
-- rec1 v = { a = rec1 v , b = rec1 v }  -- ∏ A B → ⊤ → µa.{a : a , b : a}

-- Wildcard (poison cannot merge cases)
--null = \case
--  @None => @True
--  ? => @False

-- ! returning let-bind outside its scope messes up its name resolution

--import SpecialisationTests/SpecPapArg
--import SpecTests
--import SpecialisationTests/SimpleMutual
--import SpecialisationTests/SumOfSquares
--import SpecialisationTests/fib

import stream
--import list
--import testBruijns
