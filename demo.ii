-- let-bound mixfix not in scope
-- poly1 = let _<_ = \f a => f a in (\y => y . t) < { t = 1 }  -- %i1

-- Illegal pattern (multi-line equation)
-- eq1 @x b = 2
-- eq1 a b = 3

-- record wildcard
-- rw = { x = Int , y } -- indicates y = ?

-- multi-branch μ merge =>
-- rec1 v = { a = rec1 v , b = rec1 v }  -- ∏ A B → ⊤ → µa.{a : a , b : a}

-- Add Module names to namespace , name clash when opening ?
-- import Maybe
-- y = Maybe

--imports list list2 tree question ls foldr Free parsec intmap patternTests hash
--import irieShell -- ideas for irie as shell
--import imports/TreeStream
--import SpecialisationTests/{SpecPapArg , SimpleMutual , SumOfSquares , fib , WrappedSimpleMutual}
--import SpecTests
--import testBruijns -- β-reduction
--import testFuse
--import sumMul
--import letCaptureTests
--import casecase
--import tupleTests
--import Tee -- duplicate streams
--import dir
--import asmTests
--import ii/Subsumption
--import CTests

-- Label Index out of bounds on use before declare
--x = Just 3
--Maybe = data
--  Just Int
--f = Just 3 -- ok

-- Allow declare recursive data types; μ?
--IntList = data
--  Nil
--  Cons Int -- IntList
--g (Cons x) = x
--f = Cons 3

-- emit typedefs & use user declared types ?
--Wrap = data
--  wrap
--lol = wrap

-- type params (conv BruijnAbs to THBi)
-- * Bruijns in types are already THBounds
-- ? type application vs implicit
-- Maybe a = data
--   Nothing
--   Just a
-- f = Just 3

-- funArg (& polys)
-- foldr f s l = add 0 case l of
--  @Cons x xs => f (add 0 x) (foldr f s xs)
--  @Nil       => add s 0

-- Imports

-- ? where to alloc mem. Stack is good iff mem is freed on same stack frame
-- withAlloca : ∀a. Int -> a -> a
-- unfoldrStr : (seed -> Next a seed) -> seed -> Array a

-- * Alt casts infer:409
-- altCast = \case
--   True  => 0 -- i1 <: i8
--   False => 5 -- i8

-- Label & sumtype casts
--either = \case
--  @Left a  => add a 2
--  @Right b => add b 5
--main = either (@Left 3)

-- * Type application (& type params) & Cast to TPoly
-- * Specialise polys to a size
--id x = x
--f = id 3

-- lift / inline / specialise bruijn fns & η-expand paps
-- ap f x = f x
-- main = ap (\y => add 3 y) 4

--import stream
--f = tailRecurse

import prelude
import ii/m1
f = (a , b , c)
g x y = x + y
