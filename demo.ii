-- let-bound mixfix => make VLetBind instead of QName
-- poly1 = let _<_ = \f a => f a in (\y => y.t) < { t = 1 }  -- %i1

-- Type ascriptions
--Rectangle (P : Set) : Set = { f = P }
--Recangle = { f = Int , g = Int }
--rect = { f = 5 , g = 3 } : Rectangle

-- Let conflict "0"
--eq1 @x b = 2
--eq1 a b = 3

--import stream
--f = fromMaybe -- should not be available

--imports list list2 tree question ls foldr Free parsec intmap patternTests
--import irieShell -- ideas for irie as shell
--import imports/TreeStream
--import SpecialisationTests/{SpecPapArg , SimpleMutual , SumOfSquares , fib}
--import SpecTests
--import testBruijns -- β-reduction
--import testFuse
--import sumMul
--import letCaptureTests
--import casecase
--import tupleTests
--import mutumorphism -- avoid let-block
--import Tee -- duplicate streams

-- multi-branch μ merge =>
-- rec1 v = { a = rec1 v , b = rec1 v }  -- ∏ A B → ⊤ → µa.{a : a , b : a}

-- | lift-lets + Mutumorphisms + pdep captures
