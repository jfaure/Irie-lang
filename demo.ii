import imports/prelude
--import imports/list
--import imports/simpleTests
module demo x =

--List A = | None | Some A (List A)
List A = data
  None
  Some A (List A)

--rect (P : Set) : Set = record
--  f : Int
--  g : Int

--f (x : Int) = x
--id x = x : a -> a

--id : Î  a -> a -> a
--id : (a : Set) -> a
id x = x

-- step dirp = case j (readdir dirp) of
--   Nothing => Nothing
--   Just a  => Just { val = a , seed = dirp }
-- j = Just

-- ls dName = unfoldr step (opendir dName)
--
-- File = { basename = identity } --takeWhileEnd (/= '/') }
-- Dir  = { pwd = getcwd , entries = ls }
--
-- -- tree : String -> IO ()
-- tree rootPath = puts rootPath -- *> subTree "|-- " rootPath
-- pp pre ent =  (append pre (File.basename (direntName ent)))
-- subTree prefix path = map (pp prefix) (Dir.entries path)
-- The prefix in pretty-printing:
-- when a dir is opened:
-- 1. replace preceeding "--" with spaces
-- 2. append if last dir then "`-- " else "|-- " to prefix,
-- when a dir is closed, remove the "|-- "
----subTree : (String where size >= 4) -> String -> IO ()
--subTree prefix path = let
--  ents = filter (\e => e.0 =? '.') (Dir.entries path)
--  newPrefix  = dropTail 3 prefix ++ "   "
--  lastPrefix = dropTail 4 prefix ++ "`-- "
--  pp prefix ent = puts (prefix ++ File.basename ent) *> subTree (prefix ++ "|-- ") ent
--  in map (\e => pp newPrefix e) entries *> pp lastPrefix last
