-- let-scope depends on parse
-- letscopeAfterMixfix y = if y then let x = 3 in x else y

-- ? make top-level lambda over entire module to resolve patterns
-- (f , g) = (2 , 3)

-- let-bound mixfix => make VLetBind instead of QName
-- poly1 = let _<_ = \f a => f a in (\y => y.t) < { t = 1 }  -- %i1

--rect (P : Set) : Set = record
--Recangle = record
--  f : Int
--  g : Int
--import prelude
--import list
--import list2
--import tree
--import question
--import ls
--import foldr
--import question
--import Free
--import parsec
--import intmap

--import stream
--main = ls "hello"
--import imports/TreeStream

--f = \case { @x b | @y <- b => 1 } -- doesn't parse

-- Merge equations properly, this creates 2 bindings and bugs out inames
-- Also disallow extra names between the equations (scoped fields?)
--eq1 (@x) b = 2
--eq1 a b = 3

-- Re-generalise let-binds + Add free-variables into type to codegen let-binds

-- Label namespaces + label application
--f x = label x x -- check if label in scope as label ? or requrie @
--f (x a) = a
--g = \case
--  x => x -- Always label

-- import imports/prelude
-- x = True -- Ambiguous binding (@True OK)

-- g (x a) = a -- no '@', so x uses bind-name not label name

-- tvars must never refer to deeper let-nest tvars through their bounds
-- need to save state tvars => only biunify with instantations not the escaped tvar
--lp17 f = let r x g = { a = g x , b = f x } in { u = r 0 (add 1) , v = r {t = 1} (\y => y.t)}
-- ∏ A → ((%i1 ⊔ {t : %i1}) → A) → {u : {a : %i32 , b : A} , v : {a : %i1 , b : A}}

-- lost some μ-bounds
-- import foldr
-- nonEmptySubSequences = \case -- [a] -> [[a]]
--   @Nil       => Nil
--   @Cons x xs => let
--     f ys r = Cons ys (Cons (Cons x ys) r)
--     in Cons (Cons x Nil) (foldr f Nil (nonEmptySubSequences xs))

--list2.unwords = merge μ-bounds upwards even if layer not equal

-- multi-branch different μ merging =>
-- rec1 v = { a = rec1 v , b = rec1 v }  -- ∏ A B → ⊤ → µa.{a : a , b : a}

-- Wildcard (poison cannot merge cases)
--null = \case
--  @None => @True
--  ? => @False

-- parse nested lets
--f x =
-- let g y =
--   let h z = add z (add x y) in h
-- in g

-- ! returning let-bind outside its scope messes up its name resolution

--import SpecialisationTests/SpecPapArg
--import SpecTests
--import SpecialisationTests/SimpleMutual
--import SpecialisationTests/SumOfSquares
--import SpecialisationTests/fib
--import list
--import testBruijns -- β-reduction
--import testFuse
--import sumMul
--import stream
--import prelude

--import letCaptureTests
--import list

--letGen3 x = let y z = x z in y

t14 = (\f x => f x) (\fn x y z => x (y z)) 2 (add 2) (add 3) 1

{-
import prelude
scanSum n l = if n <? 0 then l else scanSum (sub n 1) (Cons n l)
splitAt n xs = if n <=? 0 then { l = @Nil , r = xs } else case xs of
-- KO , inlining '>' messes up free-Vars for the ( , ) LetBlock
  @Cons x xs => splitAt (n - 1) xs > \R => ( { l = @Cons x R.l , r = R.r } )
-- OK
--  @Cons x xs => (\(l , r) => ( @Cons x l , r )) (splitAt (n - 1) xs)
  @Nil =>  { l = @Nil , r = @Nil }

--t0 = (scanSum 1 Nil)
t1 = splitAt 1 (Cons 0 Nil) -- ([0] , [1])
--t2 = splitAt 1 (scanSum 2 Nil)
-}


{-
t = (\x => case (\(f , b) => @One f b) ((add x) , 3) of
  @One f b => @Two (f b)
  ) 0

next nextL nextR sr0 x = case x of
  @Left  sa => case nextL sa of
    @Done      => Skip    (Right sr0)
    @Skip s    => Skip    (Left s)
    @Yield x s => Yield x (Left s)
  @Right sb => case nextR sb of
    @Done      => Done
    @Skip s    => Skip    (Right s)
    @Yield x s => Yield x (Right s)

Sappend (@stream nextL sl0) (@stream nextR sr0) = let
  in ana (next nextL nextR sr0) (@Left sl0)

SconcatMap f (@stream nexta seed) =
  @stream (nextC f nexta) (seed , None)

nextC f nexta (sa , m) = case m of
  @None => case nexta sa of
    @Done      => Done
    @Skip s    => Skip (s , @None)
    @Yield a s => Skip (s , @One (f a))
  @One (@stream nextb sb) => case nextb sb of
    @Done      => Skip    (sa , @None)
    @Skip s    => Skip    (sa , @One (stream nextb s))
    @Yield b s => Yield b (sa , @One (stream nextb s))

ana next seed = @stream next seed

enumFromTo lo hi = ana (\i => if i >? hi then @Done else @Yield i (i + 1)) lo

go c z next s = case next s of
  @Done      => z
  @Skip    r => go c z next r
  @Yield x r => c x (go c z next r)
foldr c z (@stream next seed) =
  go c z next seed

t   = foldr add 0 (enumFromTo 0 1)
tt  = foldr add 0 (Sappend (enumFromTo 0 3) (enumFromTo 4 5))
ttt = foldr add 0 (SconcatMap (enumFromTo 0) (enumFromTo 0 0))
-}
