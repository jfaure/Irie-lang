module demo x =

--rec1 v = { a = rec1 v , b = rec1 v }  -- ⊤ → µx.{a : x , b : x}

--testParity n = let
--  isEven n = ifThenElse (eq n 0) 1 (isOdd (sub n 1))
--  isOdd n  = ifThenElse (eq n 0) 0 (isEven (sub n 1))
--  in isEven n

--rect (P : Set) : Set = record
--  f : Int
--  g : Int

import imports/prelude
import imports/list
--import imports/ls

-- File CString ; Dir CString (List Dir)
--printDirTree : Str -> Dir -> Str
printDirTree prefix = \case
  File f   => prefix ++ f
  Dir d r => prefix ++ d ++ concatMap (printDirTree (fromCString " |-- " ++ prefix)) r
  _ => prefix
  
{-
-- [a] -> [[a]]
nonEmptySubSequences = \case
  Nil => Nil
  Cons x xs => let
    f ys r = Cons ys (Cons (Cons x ys) r)
    in Cons (Cons x Nil) (foldr f Nil (nonEmptySubSequences xs))
-}
