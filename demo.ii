-- let-bound mixfix in scope outside, wrong IName/Letname
-- poly1 = let _<_ = \f a => f a in (\y => y . t) < { t = 1 }  -- %i1

-- Illegal pattern
-- eq1 @x b = 2
-- eq1 a b = 3

--imports list list2 tree question ls foldr Free parsec intmap patternTests hash
--import irieShell -- ideas for irie as shell
--import imports/TreeStream
--import SpecialisationTests/{SpecPapArg , SimpleMutual , SumOfSquares , fib , WrappedSimpleMutual}
--import SpecTests
--import testBruijns -- β-reduction
--import testFuse
--import sumMul
--import letCaptureTests
--import casecase
--import tupleTests
--import mutumorphism -- avoid let-block
--import Tee -- duplicate streams

-- Cat records: V and ^
-- set/get formal semantics, adding new fields?

-- multi-branch μ merge =>
-- rec1 v = { a = rec1 v , b = rec1 v }  -- ∏ A B → ⊤ → µa.{a : a , b : a}

-- Libs: Optparse Lens List Eff DFA BitSet

-- Profunctor Lenses: lens|prims|iso|adapter|traversal|getter|fold
-- * Set unconditionally adds a field (scoped-fields can stack)
-- * Optic = p a b -> p s t
-- * Lens = view : s -> a , update : (b , s) -> t
-- ? GLens : (s -> (a -> b) -> (b , t)) => view s = fst (glens s identity) ; update s x = snd (glens s (const x))
-- 'x' field QName not imported.
-- import Maybe?
-- f = rect . x

-- recursive Tree Automata; enumerate data modulo (N constructors) and build a NFA transition table

-- Allow less general annotations
-- f : Arrow Int { x = Int }
-- f x = { x = x }

-- type params (conv fn to THBi or embed Core in types)
-- type application vs implicit THBi
-- Maybe a = data
--   Nothing
--   Just a

-- gadt/data: emit constructor bindings and a type alias
-- Choice = data
--   S1 Int
-- f = S1 -- should KO; S1 : Int -> [S1 {Int}]

-- * function Fix & mutu-fix
-- * when fn references prev inference stack => cycle;
-- ? everything between them is mutual
--ii/SpecialisationTests/WrappedSimpleMutual.ii"
import prelude
g2 z i = if z >? i then z else g1 z i
g1 z i = g2 (i + z) i
