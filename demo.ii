--import imports/prelude
--import imports/list
--import imports/simpleTests
module demo x =

-- scansum: muroll & type intersection simplification
--scanSum n l = ifThenElse (le n 0) l (scanSum (sub n 1) (Cons n l))

-- ? data args/ret & codata
--foldl f s l = case l of
--  Cons x xs => foldl f (f s x) xs
--  Nil       => s
--
--enumFromTo a b = ifThenElse (gt a b) Nil (Cons a (enumFromTo (add 1 a) b))
--
--fuse = foldl add 0 (enumFromTo 0 10)

--nextAppend (Left input) = case nextEnum input of
--  Done       => Skip    (Right input2)
--  Skip xs    => Skip    (Left xs)
--  Yield x xs => Yield x (Left xs)
--nextAppend (Right ys) = case nextEnum ys of
--  Done       => Done
--  Skip bs    => Skip    (Right bs)
--  Yield x ys => Yield x (Right ys)

ifCase scrut a b = case scrut of
  True  => a
  False => b

bool2Bool i = ifThenElse i True False

sum z s = case nextEnum s of
  Done      => z
  Skip s    => sum z         s
  Yield x s => sum (add z x) s

--nextEnum n = ifThenElse (ge n 10) Done (Yield n (add 1 n))
--nextEnum n = ifCase (bool2Bool (ge n 10)) Done (Yield n (add 1 n))
nextEnum n = case (bool2Bool (ge n 10)) of
  True  => Done
  False => Yield n (add 1 n)

--sumAppend xs = go 0 (Left xs)

--rect (P : Set) : Set = record
--  f : Int
--  g : Int

--FileName  = { basename = identity } --takeWhileEnd (/= '/')
--Directory = { pwd = getcwd , entries = ls }

--Dir = data
--  File CString
--  Dir  CString (List Dir)

--printDirTree : Str -> Dir -> CString
--printDirTree prefix = \case
--  File f => prefix ++ f
--  Dir  d r => prefix ++ d ++ map (printDirTree (fromCString " |-- " ++ prefix)) r

--step dirp = case j (readdir dirp) of
--  Nothing => Nothing
--  Just a  => Just { val = a , seed = dirp }
--j = Just
--
--ls dName = unfoldr step (opendir dName)
